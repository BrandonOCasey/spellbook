#!/usr/bin/env node
var config = require('./utils/config');
var PathExists = require('./utils/path-exists');
var path = require('path');
var GetPath = require('./utils/get-path');
var RunCommand = require('./utils/run-command');

var program = require('commander')
  .version(config.spellbookVersion)
  .arguments('[environments...]')
  .action(function(environments) {
    this.environments = environments;
  })
  .option('-w, --watch', 'keep the tester running and run as things change')
  .parse(process.argv);

var browsers = [];
var others = ['rollup', 'webpack', 'node', 'browserify'];

if (!program.environments) {
  program.environments = [];
} else {
  others = [];
}

program.environments.forEach(function(environment) {
  if ((/chrome|ie|safari|firefox/i).test(environment)) {
    browsers.push(environment);
  } else if ((/node|webpack|browserify|rollup/i).test(environment)) {
    others.push(environment);
  } else {
    console.error('invalid environment ' + environment);
    process.exit(1);
  }
});

var KARMA_BROWSERS = ['Chrome', 'Firefox', 'IE', 'Safari'];

if (!PathExists(path.join(config.dist, 'test', 'bundle.js'))) {
  RunCommand('exec', GetPath('sb-build-js'));
}

if (!PathExists(path.join(config.dist, 'browser', config.name + '.css'))) {
  RunCommand('exec', GetPath('sb-build-css'));
}


// TODO: how do we integrate this with spellbook-start (module.export?)
// TODO: test non-browser environments somehow
// http://localhost:9876/debug.html will be qunit UI
var options = {
  autoWatch: program.watch,
  singleRun: !program.watch,
};

var commands = [];
var karmaCommand = GetPath('karma')
  + ' start ' + GetPath('karma.config.js');

if (program.watch) {
  karmaCommand += ' --auto-watch';
  karmaCommand += ' --no-single-run';
}

if (program.environments) {
  karmaCommand += ' --browsers ' + browsers.join(',');
}

others.forEach(function(other) {
  if (other === 'node') {
    commands.push('node ' + GetPath('node.test.js'));
  } else if (other === 'browserify') {
    commands.push(GetPath('browserify')
      + ' ' + GetPath('browserify.test.js')
      + ' -o ' + path.join(config.tmp, 'test',  'browserify.test.js')
    );
  } else if (other === 'rollup') {
    commands.push(GetPath('browserify')
      + ' ' +  GetPath('rollup.test.js')
      + ' -c ' + GetPath('rollup-test.config.js')
      + ' -o ' + path.join(config.tmp, 'test',  'rollup.test.js')
    );
  } else if (other === 'webpack') {
    commands.push(GetPath('webpack')
      + ' ' + GetPath('webpack.test.js')
      + ' ' + path.join(config.tmp, 'test',  'webpack.test.js')
    );
  }
});

commands.forEach(function(command) {
  RunCommand('exec', command, {async: true});
});

// RunCommand('exec', karmaCommand);
