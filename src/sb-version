#!/usr/bin/env node
var config = require('./utils/config');
var PathExists = require('./utils/path-exists');
var path = require('path');
var RunCommand = require('./utils/run-command');
var GetPath = require('./utils/get-path');
var glob = require('glob');
var semver = require('semver');

var program = require('commander')
  .version(config.spellbookVersion)
  .option('-d, --dry-run', 'print which commands would be run')
  .arguments('<newversion>')
  .action(function(newVersion) {
    this.newVersion = newVersion;
  })
  .parse(process.argv);

if (!program.newVersion || (
  !(/major|minor|patch|premajor|preminor|prepatch|prerelease/).test(program.newVersion) &&
  !semver.valid(program.newVersion)
  )
) {
  console.error('newversion must be a valid semver version or one of the following:')
  console.error('major | minor | patch | premajor | preminor | prepatch | prerelease')
  process.exit(1);
}


/**
 * Determines whether or not the project has the CHANGELOG setup by checking
 * for the presence of a CHANGELOG.md file and the necessary dependency and
 * npm script.
 *
 * @return {Boolean}
 */
var getChangelog = function() {
  return glob.sync(path.join(config.path, 'CHANGELOG.md'), {nocase: true});
};

var changelog = getChangelog();
var commands = ['cd \'' + config.path + '\'', 'npm version ' + program.newVersion];

// If the project has a CHANGELOG, update it for the new release.
if (changelog) {
  commands.push('chg release ' + config.version);
  commands.push('git add ' + changelog);
}

// If the project supports Bower, perform special extra versioning step.
if (PathExists(path.join(config.path, 'bower.json'))) {
  commands.push('git add package.json');
  commands.push('git commit -m "' + config.version + '"');

  commands.push(GetPath('spellbook-build'));
  commands.push(GetPath('spellbook-clean'));
  commands.push('git reset --hard HEAD~1');
}

commands.forEach(function(command) {
  console.log(command);
  if (program.dryRun) {
    return;
  }

  RunCommand('exec', command);
});
